随想录：https://github.com/youngyangyang04/leetcode-master
数组 √
链表 √
字符串：T6 T7
哈希表：skip
双指针：skip
栈：skip
二叉树：skip
回溯：【T1 T2 T3 T4 T7 T9 T13 T14 T15 √|T58 T10×】4d：T37-H、T332-H
哈希/map...
贪心（5d）：T455 T376 T122 T45 T134 T406 T452
    个人感想：贪心是每次选择局部最优的，最终答案是全局最优。这个原理就决定了贪心算法求解时的决策顺序。
查找（广搜、深搜）：2d
DP：动态规划中的一个重点就是状态转移，而想要做好这个，就得先根据题设找到所有的状态，然后再考虑转移；在做好这块的内容之后，可以考虑简化：如滚动数组
    T63 T343 T96 T70
    【0-1背包】 T416 T1049 T494 T474【一遍过！】 ：（1）有没有-背包；（2）有几个：背包+爬楼梯
    【完全背包】 T518 T70（爬楼梯-完全背包-排列） T377 T322-amount-min T279 T139
    【打家劫舍】 T198 T213 T337
    【买股票】 T121
        Ⅰ：给一支股票每天的价格，求买卖一次的max_profit：dp[i]：第i天卖出所赚：每次都积累前i-1天最低价（买入）
        Ⅱ：给~价格，每天都可以买入/卖出（但持股数<=1）：抓住所有上升边
        Ⅲ：给~价格，每天...<=1），最多买卖两次
            关键在于决定第一次卖出，因为一旦交易一次，情况就和Ⅰ一样了
            一：dp[i]：第一次在不晚于第i天卖出：复杂度n^2：不好：想办法记录之前的结果（pre_min）
            二：先正序遍历取min；再倒序遍历取max；遍历生成dp：每一个i可以直接找到这个i对应到左侧的min和i+1对应到右侧的max。。。
            三：正序计算在不晚于第i天卖的利润；倒序算在不早于第i天买的利润；遍历i
        Ⅳ：给~价格，每天...<=1），最多买卖k次
            一：借用上一次的思路：fori{for k}：最终O(n)=2nk
            二：